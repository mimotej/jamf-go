name: Release
on:
  issues:
    types:
      - opened
permissions:
  issues: write
jobs:
  verify-user:
    outputs:
      comment: ${{ steps.comment.outputs.comment-id }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkif release issue
        if: ${{ !contains(github.event.issue.labels.*.name, 'release') }}
        continue-on-error: true
        id: releaseLabel
        shell: bash
        run: exit 1
      - name: "Check if user has write access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        id: access
        continue-on-error: true
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issue
        uses: peter-evans/close-issue@v2
        if: ${{ !steps.access.outcome == 'failure' }}
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ‚úã You do not have rights to run this action @${{ github.event.issue.user.id }}. ‚úã
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Exit on failure
        if: ${{ steps.access.outcome == 'failure'}}
        shell: bash
        run: exit 1
      - name: Create starting comment
        uses: peter-evans/create-or-update-comment@v2
        id: comment
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            üë∑‚Äç‚ôÇÔ∏è Job started [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) hold tight!.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test-lint:
    outputs:
      comment: ${{ steps.comment-ok.outputs.comment-id }}
    runs-on: ubuntu-latest
    needs: verify-user
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Test
        id: test
        uses: ./.github/actions/test
      - name: GolangCI lint
        id: lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61.0
      - name: Test build
        id: test-build
        uses: ./.github/actions/test-build
      - name: Update commment
        uses: peter-evans/close-issue@v2
        if: ${{ failure() }}
        id: comment-fail
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-id: ${{ needs.verify-user.outputs.comment }}
          body: |
            ‚ùå Sorry tests failed!.‚ùå
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update commment
        uses: peter-evans/create-or-update-comment@v2
        id: comment-ok
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-id: ${{ needs.verify-user.outputs.comment }}
          body: |
            ‚úÖ Tests ok!.‚úÖ
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release:
    outputs:
      comment: ${{ steps.comment-ok.outputs.comment-id }}
      release-version: ${{ steps.semantic-release.outputs.new_release_version }}
    runs-on: ubuntu-latest
    needs:
      - verify-user
      - test-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update commment
        uses: peter-evans/create-or-update-comment@v2
        id: comment
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-id: ${{ needs.test-lint.outputs.comment }}
          body: |
            ‚úÖ Preparing release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release via semantic-release
        uses: cycjimmy/semantic-release-action@v4.1.1
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
      - name: Update comment
        uses: peter-evans/close-issue@v2
        if: ${{ steps.semantic.outputs.new_release_published != 'true' }}
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-id: ${{ steps.comment.outputs.comment-id }}
          body: |
            ‚õî No release needed, closing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ubuntu-latest
    needs:
      - verify-user
      - test-lint
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build and push
        uses: ./.github/actions/build-docker
        id: build
        with: 
          tags: "mimotej/go-jamf:${{ needs.release.outputs.release-version }},mimotej/go-jamf:$latest"
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare PR DEV
        id: prepare-pr-dev
        uses: ./.github/actions/prepare-pr
        with:
          tag: "${{ needs.release.outputs.release-version }}"
          PAT: "${{ secrets.PAT }}"
          repo: 'mimotej/jamf-manifests'
          file: 'values-dev.yaml'
      - name: Prepare PR release
        id: prepare-pr-release
        uses: ./.github/actions/prepare-pr-release
        with:
          tag: "${{ needs.release.outputs.release-version }}"
          PAT: "${{ secrets.PAT }}"
          repo: 'mimotej/jamf-manifests'
          file: 'values.yaml'
          release-version: "${{ needs.release.outputs.release-version }}"
      - name: Create or update comment
        uses: peter-evans/close-issue@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-id: ${{ needs.release.outputs.comment }}
          body: |
            ‚úÖ Build done!
            üì¶ Link to DockerHub image: "https://hub.docker.com/layers/mimotej/go-jamf/${{ needs.release.outputs.release-version }}/images/${{ steps.build.outputs.build-digest }}"
            üèóÔ∏è Dev instance PR: ${{ steps.prepare-pr-dev.outputs.pr-link }}
            üñ•Ô∏è Prod instance PR: ${{ steps.prepare-pr-release.outputs.pr-link }}
          token: ${{ secrets.GITHUB_TOKEN }}
      

        
